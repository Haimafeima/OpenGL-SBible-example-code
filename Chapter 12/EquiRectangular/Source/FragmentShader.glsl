#version 410 core

// 统一变量，环境纹理采样器
uniform sampler2D tex_envmap;

// 输入变量
in VS_OUT {
    vec3 normal;
    vec3 view;
} fs_in;

// 输出变量
out vec4 color;

void main(void) {
    // 计算标准观察向量
    vec3 u = normalize(fs_in.view);

    // 计算视图坐标系中的观察向量沿法向量的反射向量，即为“光源向量”
    vec3 r = reflect(u, normalize(fs_in.normal));

    // 计算环境纹理贴图中的采样坐标
    vec2 tc;
    // 反射向量的y被直接投影到环境纹理中的t坐标，可以理解为高度
    tc.y = r.y;
    // 将反射向量y轴分量设置为0，在求其标准向量，从而将其投影到xz平面，再通过其x和z值计算出环境纹理贴图中的采样坐标s分量
    r.y = 0.0;
    tc.x = normalize(r).x;

    // 1. 等矩形球面贴图的制作方式决定了其坐标的原点和被投影模型在视图空间中的（x：0，z：-1）对应
    // 2. 并且x轴和s轴是线性相关，也就是直接将模型投影到xy平面上，因此从被投影模型（xz）坐标到纹理坐标（st）的计算方式如下
    // 当z > 0时，tc.s = 0.5 + 0.25tc.s    => tc.s = 0.75 - 0.25 * sign(r.z) + 0.25 * tc.s * sign(r.z)
    // 当z < 0时，tc.s = 1 - 0.25tc.s      => tc.s = 0.75 - 0.25 * sign(r.z) + 0.25 * tc.s * sign(r.z)
    // 合并上面两个情况 tc.s = 0.75 - sign(r.z) * 0.25 (1 - tc.s) = 0.75 - s * 0.25 * (1 - tc.s)
    
    // 需要注意在被投影模型的(x: 0, z: -1) -> (x: -1, z: 0) -> (x: 0, z: 1) -> (x: 1, z: 0) -> (x: 0, z: -1)
    // 变化过程中其纹理坐标tc.s分别被投影成了0 -> 1.25/0.25(跳跃间断点) -> 0.5 -> 0.75 -> 1
    // 由于我们设置了纹理过滤模式为Repeat，因此上述变化可以被映射到0 -> 0.25 -> 0.5 -> 0.75 -> 1，因此能够正确采样
    float s = sign(r.z);
    tc.s = 0.75 - s * 0.25 * (1 - tc.s);
    // 将从被投影模型的到的y轴坐标分量取值区间为[-1, 1]映射至[0, 1]之间
    tc.t = 0.5 + 0.5 * tc.t;

    // 从环境纹理采样确定片段最终颜色
    color = texture(tex_envmap, tc);
}
