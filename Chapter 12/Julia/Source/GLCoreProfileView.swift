//
//  GLCoreProfileView.swift
//  Julia
//
//  Created by chenjie on 2019/12/9.
//  Copyright © 2019 chenjie. All rights reserved.
//

import GLKit

var plateData:[UInt8] = [0xFF, 0x00, 0x00, 0xFF, 0x0E, 0x03, 0xFF, 0x1C,
                         0x07, 0xFF, 0x2A, 0x0A, 0xFF, 0x38, 0x0E, 0xFF,
                         0x46, 0x12, 0xFF, 0x54, 0x15, 0xFF, 0x62, 0x19,
                         0xFF, 0x71, 0x1D, 0xFF, 0x7F, 0x20, 0xFF, 0x88,
                         0x22, 0xFF, 0x92, 0x25, 0xFF, 0x9C, 0x27, 0xFF,
                         0xA6, 0x2A, 0xFF, 0xB0, 0x2C, 0xFF, 0xBA, 0x2F,
                         0xFF, 0xC4, 0x31, 0xFF, 0xCE, 0x34, 0xFF, 0xD8,
                         0x36, 0xFF, 0xE2, 0x39, 0xFF, 0xEC, 0x3B, 0xFF,
                         0xF6, 0x3E, 0xFF, 0xFF, 0x40, 0xF8, 0xFE, 0x40,
                         0xF1, 0xFE, 0x40, 0xEA, 0xFE, 0x41, 0xE3, 0xFD,
                         0x41, 0xDC, 0xFD, 0x41, 0xD6, 0xFD, 0x42, 0xCF,
                         0xFC, 0x42, 0xC8, 0xFC, 0x42, 0xC1, 0xFC, 0x43,
                         0xBA, 0xFB, 0x43, 0xB4, 0xFB, 0x43, 0xAD, 0xFB,
                         0x44, 0xA6, 0xFA, 0x44, 0x9F, 0xFA, 0x45, 0x98,
                         0xFA, 0x45, 0x92, 0xF9, 0x45, 0x8B, 0xF9, 0x46,
                         0x84, 0xF9, 0x46, 0x7D, 0xF8, 0x46, 0x76, 0xF8,
                         0x46, 0x6F, 0xF8, 0x47, 0x68, 0xF8, 0x47, 0x61,
                         0xF7, 0x47, 0x5A, 0xF7, 0x48, 0x53, 0xF7, 0x48,
                         0x4C, 0xF6, 0x48, 0x45, 0xF6, 0x49, 0x3E, 0xF6,
                         0x49, 0x37, 0xF6, 0x4A, 0x30, 0xF5, 0x4A, 0x29,
                         0xF5, 0x4A, 0x22, 0xF5, 0x4B, 0x1B, 0xF5, 0x4B,
                         0x14, 0xF4, 0x4B, 0x0D, 0xF4, 0x4C, 0x06, 0xF4,
                         0x4D, 0x04, 0xF1, 0x51, 0x0D, 0xE9, 0x55, 0x16,
                         0xE1, 0x59, 0x1F, 0xD9, 0x5D, 0x28, 0xD1, 0x61,
                         0x31, 0xC9, 0x65, 0x3A, 0xC1, 0x69, 0x42, 0xB9,
                         0x6D, 0x4B, 0xB1, 0x71, 0x54, 0xA9, 0x75, 0x5D,
                         0xA1, 0x79, 0x66, 0x99, 0x7D, 0x6F, 0x91, 0x81,
                         0x78, 0x89, 0x86, 0x80, 0x81, 0x8A, 0x88, 0x7A,
                         0x8E, 0x90, 0x72, 0x92, 0x98, 0x6A, 0x96, 0xA1,
                         0x62, 0x9A, 0xA9, 0x5A, 0x9E, 0xB1, 0x52, 0xA2,
                         0xBA, 0x4A, 0xA6, 0xC2, 0x42, 0xAA, 0xCA, 0x3A,
                         0xAE, 0xD3, 0x32, 0xB2, 0xDB, 0x2A, 0xB6, 0xE3,
                         0x22, 0xBA, 0xEB, 0x1A, 0xBE, 0xF4, 0x12, 0xC2,
                         0xFC, 0x0A, 0xC6, 0xF5, 0x02, 0xCA, 0xE6, 0x09,
                         0xCE, 0xD8, 0x18, 0xD1, 0xCA, 0x27, 0xD5, 0xBB,
                         0x36, 0xD8, 0xAD, 0x45, 0xDC, 0x9E, 0x54, 0xE0,
                         0x90, 0x62, 0xE3, 0x82, 0x6F, 0xE6, 0x71, 0x7C,
                         0xEA, 0x61, 0x89, 0xEE, 0x51, 0x96, 0xF2, 0x40,
                         0xA3, 0xF5, 0x30, 0xB0, 0xF9, 0x20, 0xBD, 0xFD,
                         0x0F, 0xE3, 0xFF, 0x01, 0xE9, 0xFF, 0x01, 0xEE,
                         0xFF, 0x01, 0xF4, 0xFF, 0x00, 0xFA, 0xFF, 0x00,
                         0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0x0A, 0xFF, 0xFF,
                         0x15, 0xFF, 0xFF, 0x20, 0xFF, 0xFF, 0x2B, 0xFF,
                         0xFF, 0x36, 0xFF, 0xFF, 0x41, 0xFF, 0xFF, 0x4C,
                         0xFF, 0xFF, 0x57, 0xFF, 0xFF, 0x62, 0xFF, 0xFF,
                         0x6D, 0xFF, 0xFF, 0x78, 0xFF, 0xFF, 0x81, 0xFF,
                         0xFF, 0x8A, 0xFF, 0xFF, 0x92, 0xFF, 0xFF, 0x9A,
                         0xFF, 0xFF, 0xA3, 0xFF, 0xFF, 0xAB, 0xFF, 0xFF,
                         0xB4, 0xFF, 0xFF, 0xBC, 0xFF, 0xFF, 0xC4, 0xFF,
                         0xFF, 0xCD, 0xFF, 0xFF, 0xD5, 0xFF, 0xFF, 0xDD,
                         0xFF, 0xFF, 0xE6, 0xFF, 0xFF, 0xEE, 0xFF, 0xFF,
                         0xF7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF9,
                         0xFF, 0xFF, 0xF3, 0xFF, 0xFF, 0xED, 0xFF, 0xFF,
                         0xE7, 0xFF, 0xFF, 0xE1, 0xFF, 0xFF, 0xDB, 0xFF,
                         0xFF, 0xD5, 0xFF, 0xFF, 0xCF, 0xFF, 0xFF, 0xCA,
                         0xFF, 0xFF, 0xC4, 0xFF, 0xFF, 0xBE, 0xFF, 0xFF,
                         0xB8, 0xFF, 0xFF, 0xB2, 0xFF, 0xFF, 0xAC, 0xFF,
                         0xFF, 0xA6, 0xFF, 0xFF, 0xA0, 0xFF, 0xFF, 0x9B,
                         0xFF, 0xFF, 0x96, 0xFF, 0xFF, 0x90, 0xFF, 0xFF,
                         0x8B, 0xFF, 0xFF, 0x86, 0xFF, 0xFF, 0x81, 0xFF,
                         0xFF, 0x7B, 0xFF, 0xFF, 0x76, 0xFF, 0xFF, 0x71,
                         0xFF, 0xFF, 0x6B, 0xFF, 0xFF, 0x66, 0xFF, 0xFF,
                         0x61, 0xFF, 0xFF, 0x5C, 0xFF, 0xFF, 0x56, 0xFF,
                         0xFF, 0x51, 0xFF, 0xFF, 0x4C, 0xFF, 0xFF, 0x47,
                         0xFF, 0xFF, 0x41, 0xF9, 0xFF, 0x40, 0xF0, 0xFF,
                         0x40, 0xE8, 0xFF, 0x40, 0xDF, 0xFF, 0x40, 0xD7,
                         0xFF, 0x40, 0xCF, 0xFF, 0x40, 0xC6, 0xFF, 0x40,
                         0xBE, 0xFF, 0x40, 0xB5, 0xFF, 0x40, 0xAD, 0xFF,
                         0x40, 0xA4, 0xFF, 0x40, 0x9C, 0xFF, 0x40, 0x95,
                         0xFF, 0x40, 0x8D, 0xFF, 0x40, 0x86, 0xFF, 0x40,
                         0x7E, 0xFF, 0x40, 0x77, 0xFF, 0x40, 0x6F, 0xFF,
                         0x40, 0x68, 0xFF, 0x40, 0x60, 0xFF, 0x40, 0x59,
                         0xFF, 0x40, 0x51, 0xFF, 0x40, 0x4A, 0xFA, 0x43,
                         0x42, 0xF3, 0x48, 0x3E, 0xED, 0x4E, 0x3D, 0xE6,
                         0x53, 0x3B, 0xDF, 0x58, 0x39, 0xD8, 0x5E, 0x37,
                         0xD2, 0x63, 0x35, 0xCB, 0x68, 0x34, 0xC4, 0x6D,
                         0x32, 0xBD, 0x73, 0x30, 0xB7, 0x78, 0x2E, 0xB0,
                         0x7D, 0x2D, 0xA9, 0x83, 0x2B, 0xA2, 0x88, 0x29,
                         0x9C, 0x8D, 0x27, 0x95, 0x92, 0x25, 0x8E, 0x98,
                         0x24, 0x87, 0x9D, 0x22, 0x81, 0xA2, 0x20, 0x7A,
                         0xA6, 0x1E, 0x74, 0xAB, 0x1D, 0x6E, 0xB0, 0x1B,
                         0x68, 0xB5, 0x1A, 0x61, 0xB9, 0x18, 0x5B, 0xBE,
                         0x17, 0x55, 0xC3, 0x15, 0x4F, 0xC8, 0x13, 0x48,
                         0xCD, 0x12, 0x42, 0xD1, 0x10, 0x3C, 0xD6, 0x0F,
                         0x36, 0xDB, 0x0D, 0x2F, 0xE0, 0x0C, 0x29, 0xE4,
                         0x0A, 0x23, 0xE9, 0x08, 0x1D, 0xEE, 0x07, 0x16,
                         0xF3, 0x05, 0x10, 0xF7, 0x04, 0x0A, 0xFC, 0x02,
                         0x04, 0xFB, 0x01, 0x04, 0xEF, 0x00, 0x12, 0xE4,
                         0x00, 0x1F, 0xD9, 0x00, 0x2D, 0xCE, 0x00, 0x3B,
                         0xC2, 0x00, 0x48, 0xB7, 0x00, 0x56, 0xAC, 0x00,
                         0x64, 0xA0, 0x00, 0x72, 0x95, 0x00, 0x7F, 0x8A,
                         0x00, 0x88, 0x7F, 0x00, 0x92, 0x75, 0x00, 0x9C,
                         0x6B, 0x00, 0xA6, 0x61, 0x00, 0xB0, 0x57, 0x00,
                         0xBA, 0x4E, 0x00, 0xC4, 0x44, 0x00, 0xCE, 0x3A,
                         0x00, 0xD8, 0x30, 0x00, 0xE2, 0x27, 0x00, 0xEC,
                         0x1D, 0x00, 0xF6, 0x13, 0x00, 0xFF, 0x09, 0x00,
]

private struct UniformLocation {
    var zoom: GLint = 0
    var offset: GLint = 0
    var tex_gradient: GLint = 0
    var C: GLint = 0
}

class GLCoreProfileView: NSOpenGLView {
    //MARK:- Public properties
    // 除去暂停后实际渲染的时间
    var renderDuration: TimeInterval = 0
    var xOffset: GLfloat = 0
    var yOffset: GLfloat = 0
    var zoom: GLfloat = 1
    var timeOffset: Float = 0
    
    //MARK:- Private Properties
    private var glProgram: GLuint = 0
    private var vao: GLuint = 0
    private var uniformLocations = UniformLocation()
    private var paletteTexture: GLuint = 0
    
    //MARK:- Life Cycles
    override init?(frame frameRect: NSRect, pixelFormat format: NSOpenGLPixelFormat?) {
        super.init(frame: frameRect, pixelFormat: format)
        // 禁用Retina屏幕显示
        self.wantsBestResolutionOpenGLSurface = false

        self.prepareOpenGLContex()
    }
    
    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    deinit {
        glDeleteProgram(self.glProgram)
        glDeleteVertexArrays(1, &self.vao)
    }
    
    //MARK:- Private Methods: General
    override func reshape() {
        super.reshape()
        glViewport(0, 0, GLsizei(NSWidth(self.frame)), GLsizei(NSHeight(self.frame)))
    }
    
    //MARK:- Private Methods: Render
    private func prepareOpenGLContex() {
        let pixelFormatAttributes = [UInt32(NSOpenGLPFAColorSize), 32,
                                     UInt32(NSOpenGLPFADepthSize), 24,
                                     UInt32(NSOpenGLPFAStencilSize), 8,
                                     UInt32(NSOpenGLPFAAccelerated),
                                     UInt32(NSOpenGLPFAOpenGLProfile), UInt32(NSOpenGLProfileVersion4_1Core),
                                     0]
        guard let pixelFormat = NSOpenGLPixelFormat(attributes: pixelFormatAttributes) else { return }
        let currentOpenGLContext = NSOpenGLContext(format: pixelFormat, share: nil)
        self.openGLContext = currentOpenGLContext
        self.openGLContext?.makeCurrentContext()
        // 设置缓存交换频率和屏幕刷新同步
        var swapInterval = GLint(1)
        CGLSetParameter(CGLGetCurrentContext()!, kCGLCPSwapInterval, &swapInterval)
    }
    
    override func prepareOpenGL() {
        super.prepareOpenGL()
        print("Version: \(String(cString: glGetString(uint32(GL_VERSION))))")
        print("Renderer: \(String(cString: glGetString(uint32(GL_RENDERER))))")
        print("Vendor: \(String(cString: glGetString(GLenum(GL_VENDOR))))")
        print("GLSL Version: \(String(cString: glGetString(GLenum(GL_SHADING_LANGUAGE_VERSION))))")

        // 1. 准备OpenGL程序
        if !self.prepareOpenGLProgram() {
            return
        }

        // 2. 准备纹理贴图
        glGenTextures(1, &self.paletteTexture)
        glBindTexture(GLenum(GL_TEXTURE_1D), self.paletteTexture)
        glTexImage1D(GLenum(GL_TEXTURE_1D), 0, GL_RGB8, 256, 0, GLenum(GL_RGB), GLenum(GL_UNSIGNED_BYTE), &plateData)
        glGenerateMipmap(GLenum(GL_TEXTURE_1D))
        
        // 3. 准备VAO
        glGenVertexArrays(1, &self.vao)
    }

    private func prepareOpenGLProgram() -> Bool {
        let shaders = ["VertexShader" : GLenum(GL_VERTEX_SHADER),
                       "FragmentShader" : GLenum(GL_FRAGMENT_SHADER)]
        let successed = self.prepareGLProgram(&self.glProgram, shaders: shaders)
        if !successed {
            return false
        }
        
        self.uniformLocations.zoom = glGetUniformLocation(self.glProgram, "zoom")
        self.uniformLocations.offset = glGetUniformLocation(self.glProgram, "offset")
        self.uniformLocations.tex_gradient = glGetUniformLocation(self.glProgram, "tex_gradient")
        self.uniformLocations.C = glGetUniformLocation(self.glProgram, "C")
        return true
    }
            
    private func prepareGLProgram(_ glProgram: inout GLuint, shaders: [String : GLenum]) -> Bool {
        if shaders.count == 0 {
            print("No available shader.")
            return false
        }
        
        // 1. 创建GL程序
        glProgram = glCreateProgram()

        for (_, shaderInfo) in shaders.enumerated() {
            // 2. 获取着色器的源码
            guard let shaderPath = Bundle.main.path(forResource: shaderInfo.key, ofType: "glsl") else {
                print("Can not find shader file at " + shaderInfo.key)
                return false
            }
            
            // 3. 创建着色器
            let shader = glCreateShader(shaderInfo.value)
            
            // 4. 编译着色器
            if !self.compileShader(shader, filePath: shaderPath) {
                glDeleteShader(shader)
                return false
            }

            // 5. 将着色器附着至OpenGL程序
            glAttachShader(glProgram, shader)
            glDeleteShader(shader)
        }
        
        // 6. 编译GL程序
        if !self.linkProgram(program: glProgram) {
            print("Failed to link program")
            glDeleteProgram(glProgram)
            glProgram = 0
            return false
        }
        return true
    }
        
    private func compileShader(_ shader: GLuint, filePath: String) -> Bool {
        // 1. 为着色器填充源码
        var shaderSource: UnsafePointer<GLchar>?
        do {
            shaderSource = try NSString(contentsOfFile: filePath, encoding: String.Encoding.utf8.rawValue).utf8String
        } catch {
            print("Error when compile shader")
        }
        glShaderSource(shader, 1, &shaderSource, nil)
        // 2. 编译着色器
        glCompileShader(shader)
        
        // 3. 查询着色器编译错误日志
        var status: GLint = 0
        glGetShaderiv(shader, GLenum(GL_COMPILE_STATUS), &status)
        if status == 0 {
            var logLength: GLint = 0
            glGetShaderiv(shader, GLenum(GL_INFO_LOG_LENGTH), &logLength)
            var infoLogChars = [GLchar](repeating: 0, count: Int(logLength))
            glGetShaderInfoLog(shader, logLength, nil, &infoLogChars)
            let infoLogString = String(utf8String: infoLogChars) ?? ""
            print("Compile Shader Failed at \n" + filePath + "\nWith Log\n" + infoLogString)
            return false
        }
        return true
    }

    func linkProgram(program: GLuint) -> Bool {
        glLinkProgram(program)
        var status: GLint = 0
        glGetProgramiv(program, GLenum(GL_LINK_STATUS), &status)
        if status == 0 {
            var logLength: GLint = 0
            glGetProgramiv(program, GLenum(GL_INFO_LOG_LENGTH), &logLength)
            var logChars = [GLchar](repeating: 0, count: Int(logLength))
            glGetProgramInfoLog(program, GLsizei(logLength), nil, &logChars)
            let logString = String(utf8String: logChars) ?? ""
            print("Compile program failed with log \n" + logString)
            return false
        }
        
        return true
    }
        
    override func draw(_ dirtyRect: NSRect) {
        // 1. 清空颜色和深度缓存
        var blackColor: [GLfloat] = [0, 1, 0, 0]
        glClearBufferfv(GLenum(GL_COLOR), 0, &blackColor)

        // 2. 设置OpenGL程序
        glUseProgram(self.glProgram)

        // 3. 为统一变量赋值
        let timeFactor = Float(self.renderDuration) + self.timeOffset
        var C: [GLfloat] = [(sinf(timeFactor * 0.1) + cosf(timeFactor * 0.25) * 0.5), (cosf(timeFactor * 0.13) + sinf(timeFactor * 0.21)) * 0.5]
        glUniform2fv(self.uniformLocations.C, 1, &C)
        var offset = [self.xOffset, self.yOffset]
        glUniform2fv(self.uniformLocations.offset, 1, &offset)
        glUniform1f(self.uniformLocations.zoom, self.zoom)
        
        // 4. 设置VAO
        glBindVertexArray(self.vao)
        
        // 5. 绘制模型
        glDrawArrays(GLenum(GL_TRIANGLE_FAN), 0, 4)

        // 6. 清空OpenGL指令缓存，使渲染引擎尽快执行已经发布的渲染指令，同时发布窗口缓存的数据已经做好合并进入系统桌面缓存的准备
        glFlush()
    }
}
